// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  posts        Post[]
  postLikes    PostLikes[]
  postComments PostComments[]
}

model Post {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now()) @map("createAt")
  updatedAt   DateTime       @updatedAt @map("updateAt")
  title       String         @db.VarChar(30)
  description String?        @map("content")
  image       String?
  likeCount   Int            @default(0)
  place       String         @default("default-place")
  lat         Float?
  lon         Float?
  category    String         @default("culture")
  published   Boolean        @default(false)
  author      User?          @relation(fields: [authorId], references: [id])
  authorId    Int?
  likes       PostLikes[]
  comments    PostComments[]
}

model PostLikes {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model PostComments {
  commentId Int      @id @default(autoincrement())
  comment   String   @db.VarChar(100)
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}
